#pragma once

#include <string_view>
#include <cstdint>
#include <unordered_map>
#include <string>

namespace ee::tci {

static constexpr std::string_view Version {"1.8"};

static constexpr char split_cmd  {':'};
static constexpr char split_args {','};
static constexpr char end_cmd {';'};

static constexpr std::string_view split_cmd_v  {":"};
static constexpr std::string_view split_args_v {","};
static constexpr std::string_view end_cmd_v {";"};

enum class Command : std::size_t {
    Protocol = 0,
    ClickedOnSpot,
    Start,
    Stop,
    Preamp,
    PreampParam,
    TrxCount,
    AppFocus,
    SetInFocus,
    SpotClear,
    ChannelsCount,
    ReceiveOnly,
    VfoLimits,
    Vfo,
    Dds,
    If,
    IfLimits,
    IqSamplerate,
    AudioSamplerate,
    IqStart,
    IqStop,
    AudioStart,
    AudioStop,
    Trx,
    Tune,
    ModulationsList,
    Modulation,
    RxEnable,
    TxEnable,
    Ready,
    CwMacros,
    CwMsg,
    CwMacrosStop,
    CwMacrosSpeed,
    CwMacrosSpeedUp,
    CwMacrosSpeedDown,
    CwMacrosDelay,
    Spot,
    SpotDelete,
    RitEnable,
    XitEnable,
    SplitEnable,
    RitOffset,
    XitOffset,
    RxChannelEnable,
    RxFilterBand,
    RxSmeter,
    TxFootswitch,
    Device,
    CallsignSend,
    TxPower,
    TxSwr,
    Volume,
    Mute,
    SqlEnable,
    SqlLevel,
    Drive,
    TuneDrive,
    RxMute,
    EcoderSwitchRx,
    EcoderSwitchChannel,
    CtcssEnable,
    CtcssMode,
    CtcssRxTone,
    CtcssTxTone,
    CtcssLevel,
    Lock,
    MonEnable,
    MonVolume,
    RxVolume,
    RxBalance,
    AgcMode,
    AgcGain,
    RxSensors,
    TxSensors,
    RxSensorsEnable,
    TxSensorsEnable,
    CwTerminal,
    CwMacrosEmpty,
    RxNbEnable,
    RxNbParams,
    RxBin,
    RxNr,
    RxAnc,
    RxAnf,
    RxApf,
    RxDse,
    RxNf,
    RxNfParams,
    TxFrequency,
    LineOutStart,
    LineOutStop,
    LineOutRecordStart,
    LineOutRecordSave,
    LineOutRecordBreak,
    RxClickedOnSpot,
    CwKeyerSpeed,
    Keyer,
    DiglOffset,
    DiguOffset,
    AudioStreamSampleType,
    AudioStreamChannels,
    AudioStreamSamples,
    TxAudioStreamBuffering,

    Count
};

static const std::unordered_map<Command, std::string_view> TciMapCmd
{
    {Command::Protocol           , "protocol"             },
    {Command::ClickedOnSpot      , "clicked_on_spot"      },
    {Command::Start              , "start"                },
    {Command::Stop               , "stop"                 },
    {Command::Preamp             , "preamp"               },
    {Command::PreampParam        , "preamp_param"         },
    {Command::TrxCount           , "trx_count"            },
    {Command::AppFocus           , "app_focus"            },
    {Command::SetInFocus         , "set_in_focus"         },
    {Command::SpotClear          , "spot_clear"           },
    {Command::ChannelsCount      , "channels_count"       },
    {Command::ReceiveOnly        , "receive_only"         },
    {Command::VfoLimits          , "vfo_limits"           },
    {Command::Vfo                , "vfo"                  },
    {Command::Dds                , "dds"                  },
    {Command::If                 , "if"                   },
    {Command::IfLimits           , "if_limits"            },
    {Command::IqSamplerate       , "iq_samplerate"        },
    {Command::AudioSamplerate    , "audio_samplerate"     },
    {Command::IqStart            , "iq_start"             },
    {Command::IqStop             , "iq_stop"              },
    {Command::AudioStart         , "audio_start"          },
    {Command::AudioStop          , "audio_stop"           },
    {Command::Trx                , "trx"                  },
    {Command::Tune               , "tune"                 },
    {Command::ModulationsList    , "modulations_list"     },
    {Command::Modulation         , "modulation"           },
    {Command::RxEnable           , "rx_enable"            },
    {Command::TxEnable           , "tx_enable"            },
    {Command::Ready              , "ready"                },
    {Command::CwMacros           , "cw_macros"            },
    {Command::CwMsg              , "cw_msg"               },
    {Command::CwMacrosStop       , "cw_macros_stop"       },
    {Command::CwMacrosSpeed      , "cw_macros_speed"      },
    {Command::CwMacrosSpeedUp    , "cw_macros_speed_up"   },
    {Command::CwMacrosSpeedDown  , "cw_macros_speed_down" },
    {Command::CwMacrosDelay      , "cw_macros_delay"      },
    {Command::Spot               , "spot"                 },
    {Command::SpotDelete         , "spot_delete"          },
    {Command::RitEnable          , "rit_enable"           },
    {Command::XitEnable          , "xit_enable"           },
    {Command::SplitEnable        , "split_enable"         },
    {Command::RitOffset          , "rit_offset"           },
    {Command::XitOffset          , "xit_offset"           },
    {Command::RxChannelEnable    , "rx_channel_enable"    },
    {Command::RxFilterBand       , "rx_filter_band"       },
    {Command::RxSmeter           , "rx_smeter"            },
    {Command::TxFootswitch       , "tx_footswitch"        },
    {Command::Device             , "device"               },
    {Command::CallsignSend       , "callsign_send"        },
    {Command::TxPower            , "tx_power"             },
    {Command::TxSwr              , "tx_swr"               },
    {Command::Volume             , "volume"               },
    {Command::Mute               , "mute"                 },
    {Command::SqlEnable          , "sql_enable"           },
    {Command::SqlLevel           , "sql_level"            },
    {Command::Drive              , "drive"                },
    {Command::TuneDrive          , "tune_drive"           },
    {Command::RxMute             , "rx_mute"              },
    {Command::EcoderSwitchRx     , "ecoder_switch_rx"     },
    {Command::EcoderSwitchChannel, "ecoder_switch_channel"},
    {Command::CtcssEnable        , "ctcss_enable"         },
    {Command::CtcssMode          , "ctcss_mode"           },
    {Command::CtcssRxTone        , "ctcss_rx_tone"        },
    {Command::CtcssTxTone        , "ctcss_tx_tone"        },
    {Command::CtcssLevel         , "ctcss_level"          },
    {Command::Lock               , "lock"                 },
    {Command::MonEnable          , "mon_enable"           },
    {Command::MonVolume          , "mon_volume"           },
    {Command::RxVolume           , "rx_volume"            },
    {Command::RxBalance          , "rx_balance"           },
    {Command::AgcMode            , "agc_mode"             },
    {Command::AgcGain            , "agc_gain"             },
    {Command::RxSensors          , "rx_sensors"           },
    {Command::TxSensors          , "tx_sensors"           },
    {Command::RxSensorsEnable    , "rx_sensors_enable"    },
    {Command::TxSensorsEnable    , "tx_sensors_enable"    },
    {Command::CwTerminal         , "cw_terminal"          },
    {Command::CwMacrosEmpty      , "cw_macros_empty"      },
    {Command::RxNbEnable         , "rx_nb_enable"         },
    {Command::RxNbParams         , "rx_nb_param"          },
    {Command::RxBin              , "rx_bin_enable"        },
    {Command::RxNr               , "rx_nr_enable"         },
    {Command::RxAnc              , "rx_anc_enable"        },
    {Command::RxAnf              , "rx_anf_enable"        },
    {Command::RxApf              , "rx_apf_enable"        },
    {Command::RxDse              , "rx_dse_enable"        },
    {Command::RxNf               , "rx_nf_enable"         },
    {Command::RxNfParams         , "rx_nf_eparam"         },
    {Command::TxFrequency        , "tx_frequency"         },
    {Command::LineOutStart       , "line_out_start"       },
    {Command::LineOutStop        , "line_out_stop"        },
    {Command::LineOutRecordStart , "line_out_recorder_start"},
    {Command::LineOutRecordSave  , "line_out_recorder_save" },
    {Command::LineOutRecordBreak , "line_out_recorder_break"},
    {Command::RxClickedOnSpot    , "rx_clicked_on_spot"     },
    {Command::CwKeyerSpeed       , "cw_keyer_speed"       },
    {Command::Keyer              , "keyer"                },
    {Command::DiglOffset         , "digl_offset"          },
    {Command::DiguOffset         , "digu_offset"          },
    {Command::AudioStreamSampleType , "audio_stream_sample_type"},
    {Command::AudioStreamChannels   , "audio_stream_channels"},
    {Command::AudioStreamSamples    , "audio_stream_samples"},
    {Command::TxAudioStreamBuffering, "tx_stream_audio_buffering"},
};

static const std::unordered_map<std::string, Command> TciMapStr
{
    {"protocol"             , Command::Protocol           },
    {"clicked_on_spot"      , Command::ClickedOnSpot      },
    {"start"                , Command::Start              },
    {"stop"                 , Command::Stop               },
    {"preamp"               , Command::Preamp             },
    {"preamp_param"         , Command::PreampParam        },
    {"trx_count"            , Command::TrxCount           },
    {"app_focus"            , Command::AppFocus           },
    {"set_in_focus"         , Command::SetInFocus         },
    {"spot_clear"           , Command::SpotClear          },
    {"channels_count"       , Command::ChannelsCount      },
    {"receive_only"         , Command::ReceiveOnly        },
    {"vfo_limits"           , Command::VfoLimits          },
    {"vfo"                  , Command::Vfo                },
    {"dds"                  , Command::Dds                },
    {"if"                   , Command::If                 },
    {"if_limits"            , Command::IfLimits           },
    {"iq_samplerate"        , Command::IqSamplerate       },
    {"audio_samplerate"     , Command::AudioSamplerate    },
    {"iq_start"             , Command::IqStart            },
    {"iq_stop"              , Command::IqStop             },
    {"audio_start"          , Command::AudioStart         },
    {"audio_stop"           , Command::AudioStop          },
    {"trx"                  , Command::Trx                },
    {"tune"                 , Command::Tune               },
    {"modulations_list"     , Command::ModulationsList    },
    {"modulation"           , Command::Modulation         },
    {"rx_enable"            , Command::RxEnable           },
    {"tx_enable"            , Command::TxEnable           },
    {"ready"                , Command::Ready              },
    {"cw_macros"            , Command::CwMacros           },
    {"cw_msg"               , Command::CwMsg              },
    {"cw_macros_stop"       , Command::CwMacrosStop       },
    {"cw_macros_speed"      , Command::CwMacrosSpeed      },
    {"cw_macros_speed_up"   , Command::CwMacrosSpeedUp    },
    {"cw_macros_speed_down" , Command::CwMacrosSpeedDown  },
    {"cw_macros_delay"      , Command::CwMacrosDelay      },
    {"spot"                 , Command::Spot               },
    {"spot_delete"          , Command::SpotDelete         },
    {"rit_enable"           , Command::RitEnable          },
    {"xit_enable"           , Command::XitEnable          },
    {"split_enable"         , Command::SplitEnable        },
    {"rit_offset"           , Command::RitOffset          },
    {"xit_offset"           , Command::XitOffset          },
    {"rx_channel_enable"    , Command::RxChannelEnable    },
    {"rx_filter_band"       , Command::RxFilterBand       },
    {"rx_smeter"            , Command::RxSmeter           },
    {"tx_footswitch"        , Command::TxFootswitch       },
    {"device"               , Command::Device             },
    {"callsign_send"        , Command::CallsignSend       },
    {"tx_power"             , Command::TxPower            },
    {"tx_swr"               , Command::TxSwr              },
    {"volume"               , Command::Volume             },
    {"mute"                 , Command::Mute               },
    {"sql_enable"           , Command::SqlEnable          },
    {"sql_level"            , Command::SqlLevel           },
    {"drive"                , Command::Drive              },
    {"tune_drive"           , Command::TuneDrive          },
    {"rx_mute"              , Command::RxMute             },
    {"ecoder_switch_rx"     , Command::EcoderSwitchRx     },
    {"ecoder_switch_channel", Command::EcoderSwitchChannel},
    {"ctcss_enable"         , Command::CtcssEnable        },
    {"ctcss_mode"           , Command::CtcssMode          },
    {"ctcss_rx_tone"        , Command::CtcssRxTone        },
    {"ctcss_tx_tone"        , Command::CtcssTxTone        },
    {"ctcss_level"          , Command::CtcssLevel         },
    {"lock"                 , Command::Lock               },
    {"mon_enable"           , Command::MonEnable          },
    {"mon_volume"           , Command::MonVolume          },
    {"rx_volume"            , Command::RxVolume           },
    {"rx_balance"           , Command::RxBalance          },
    {"agc_mode"             , Command::AgcMode            },
    {"agc_gain"             , Command::AgcGain            },
    {"rx_sensors"           , Command::RxSensors          },
    {"tx_sensors"           , Command::TxSensors          },
    {"rx_sensors_enable"    , Command::RxSensorsEnable    },
    {"tx_sensors_enable"    , Command::TxSensorsEnable    },
    {"cw_terminal"          , Command::CwTerminal         },
    {"cw_macros_empty"      , Command::CwMacrosEmpty      },
    {"rx_nb_enable"         , Command::RxNbEnable         },
    {"rx_nb_param"          , Command::RxNbParams         },
    {"rx_bin_enable"        , Command::RxBin              },
    {"rx_nr_enable"         , Command::RxNr               },
    {"rx_anc_enable"        , Command::RxAnc              },
    {"rx_anf_enable"        , Command::RxAnf              },
    {"rx_apf_enable"        , Command::RxApf              },
    {"rx_dse_enable"        , Command::RxDse              },
    {"rx_nf_enable"         , Command::RxNf               },
    {"rx_nf_param"          , Command::RxNfParams         },
    {"tx_frequency"         , Command::TxFrequency        },
    {"line_out_start"       , Command::LineOutStart       },
    {"line_out_stop"        , Command::LineOutStop        },
    {"line_out_recorder_start", Command::LineOutRecordStart},
    {"line_out_recorder_save" , Command::LineOutRecordSave },
    {"line_out_recorder_break", Command::LineOutRecordBreak},
    {"rx_clicked_on_spot"     , Command::RxClickedOnSpot   },
    {"cw_keyer_speed"       , Command::CwKeyerSpeed        },
    {"keyer"                , Command::Keyer               },
    {"digl_offset"          , Command::DiglOffset         },
    {"digu_offset"          , Command::DiguOffset         },
    {"audio_stream_sample_type", Command::AudioStreamSampleType},
    {"audio_stream_channels", Command::AudioStreamChannels},
    {"audio_stream_samples" , Command::AudioStreamSamples },
    {"tx_stream_audio_buffering", Command::TxAudioStreamBuffering},
};

} // namespace ee::tci
